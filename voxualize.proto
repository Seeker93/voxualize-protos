// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package voxualize;

service Greeter {

  // ============ File selection, and initial full LOD model stream ==================
  // Service to return a list of files in the "Data" directory.
  rpc ListFiles(FilesRequest) returns (FilesList);

  // Give file name, return the LOD model as stream.
  rpc ChooseFile(FileDetails) returns (stream ROILOD);

  // ####################### HQ RENDER RPCs #########################
  // Get the HQ render, given the camera position, cropping planes, etc.
  rpc GetHQRender(CameraInfo) returns (stream HQRender);

  // ------------------THE ROI LOD RPCs------------------------------
  // Get the New ROI LOD, given the target mem size, cropping planes, etc.
  rpc GetNewROILOD(CameraInfo) returns (stream ROILOD);

  // Get the data of various data objects. Must be specified in GetDataRequest
  //rpc GetModelData(GetDataRequest) returns (stream DataModel);

  rpc Reset(CameraInfo) returns (Empty);
}

message Empty {

}

message FilesRequest {
  string useless_message = 1; // Don't really need a message here, but not sure if you can create a message object without something in it.
}

message FilesList {
  message File {
    string file_name = 1;
    float file_size = 2;
  }
  repeated File files = 1;
}

message FileDetails {
  string file_name = 1;
  uint32 target_size_lod_bytes = 2;
  enum SamplingMethod {
    Max = 0;
    Mean = 1;
  }
  SamplingMethod s_method = 3;
}

// message DataModel {
//   bytes bytes = 1;
//   int32 num_bytes = 2;
// }

message CameraInfo {
  repeated float position = 1;
  repeated float focal_point = 2;
  int32 window_width = 3;
  int32 window_height = 4;
  repeated float view_up = 5;
  float distance = 6;
  repeated float direction_of_projection = 7;
  repeated float rgba = 8;
  float alpha = 9;
  repeated float cropping_planes = 10; // Depending on the RPC, this will or will not get used.
  uint32 target_size_lod_bytes = 11; 
  enum SamplingMethod {
    Max = 0;
    Mean = 1;
  }
  SamplingMethod s_method = 12;
}

// message GetDataRequest {
//   enum DataObject {
//     LODModel = 0;
//     HQRender = 1;
//   }
//   DataObject data_object = 1;
// }

// message DimensionDetails {
//   repeated int32 dimensions_lod = 1;
//   repeated float reduction_factors = 2;
//   repeated int32 dimensions_original = 3;
//   int32 lod_num_bytes = 4;
// }

message HQRender {
  bytes bytes = 1;
  int32 num_bytes = 2; //number of bytes in message

  int32 size_in_bytes = 3;
  int32 width = 4;  //Add width and height here, but frontend should remember/have access to them. 
  int32 height = 5;
}

message ROILOD {
  bytes bytes = 1;
  int32 num_bytes = 2; //number of bytes in message

  // these next 2 only sent in first message of stream
  uint32 total_lod_bytes = 3; //total num_bytes of LOD model
  repeated int32 dimensions_lod = 4;
  float min_pixel = 5;
  float max_pixel = 6;
}
